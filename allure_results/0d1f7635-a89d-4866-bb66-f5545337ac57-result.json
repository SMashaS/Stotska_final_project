{"name": "test_changed_currency_is_saved_after_logout", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a _ngcontent-mak-c64=\"\" class=\"btn btn-link text-danger btn-sidebar sidebar_btn\">...</a> is not clickable at point (165, 423). Other element would receive the click: <p _ngcontent-mak-c57=\"\">...</p>\n  (Session info: chrome=115.0.5790.114)\nStacktrace:\n0   chromedriver                        0x000000010d7f56b8 chromedriver + 4937400\n1   chromedriver                        0x000000010d7ecb73 chromedriver + 4901747\n2   chromedriver                        0x000000010d3aa616 chromedriver + 435734\n3   chromedriver                        0x000000010d3f5b97 chromedriver + 744343\n4   chromedriver                        0x000000010d3f3450 chromedriver + 734288\n5   chromedriver                        0x000000010d3f0a84 chromedriver + 723588\n6   chromedriver                        0x000000010d3efbe4 chromedriver + 719844\n7   chromedriver                        0x000000010d3e21e1 chromedriver + 664033\n8   chromedriver                        0x000000010d412012 chromedriver + 860178\n9   chromedriver                        0x000000010d3e19c1 chromedriver + 661953\n10  chromedriver                        0x000000010d4121ce chromedriver + 860622\n11  chromedriver                        0x000000010d42ce76 chromedriver + 970358\n12  chromedriver                        0x000000010d411de3 chromedriver + 859619\n13  chromedriver                        0x000000010d3dfd7f chromedriver + 654719\n14  chromedriver                        0x000000010d3e10de chromedriver + 659678\n15  chromedriver                        0x000000010d7b12ad chromedriver + 4657837\n16  chromedriver                        0x000000010d7b6130 chromedriver + 4677936\n17  chromedriver                        0x000000010d7bcdef chromedriver + 4705775\n18  chromedriver                        0x000000010d7b705a chromedriver + 4681818\n19  chromedriver                        0x000000010d78992c chromedriver + 4495660\n20  chromedriver                        0x000000010d7d4838 chromedriver + 4802616\n21  chromedriver                        0x000000010d7d49b7 chromedriver + 4802999\n22  chromedriver                        0x000000010d7e599f chromedriver + 4872607\n23  libsystem_pthread.dylib             0x00007ff81cdb34e1 _pthread_start + 125\n24  libsystem_pthread.dylib             0x00007ff81cdaef6b thread_start + 15", "trace": "self = <user_settings_tests.TestUserSettings object at 0x107650ed0>\n\n    def test_changed_currency_is_saved_after_logout(self):\n        self.settings_page.get_settings_side_menu_button().click()\n        time.sleep(2)\n        changed_button = self.settings_page.get_eur_button()\n        changed_button.click()\n        assert self.settings_page.get_currency_changed_alert().is_displayed()\n>       self.garage_page.get_logout_button_side_menu().click()\n\nuser_settings_tests.py:135: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ncontrols/button.py:9: in click\n    self.element.click()\nvenv/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\nvenv/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\nvenv/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:346: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x106f99350>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...ff81cdb34e1 _pthread_start + 125\\\\n24  libsystem_pthread.dylib             0x00007ff81cdaef6b thread_start + 15\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a _ngcontent-mak-c64=\"\" class=\"btn btn-link text-danger btn-sidebar sidebar_btn\">...</a> is not clickable at point (165, 423). Other element would receive the click: <p _ngcontent-mak-c57=\"\">...</p>\nE         (Session info: chrome=115.0.5790.114)\nE       Stacktrace:\nE       0   chromedriver                        0x000000010d7f56b8 chromedriver + 4937400\nE       1   chromedriver                        0x000000010d7ecb73 chromedriver + 4901747\nE       2   chromedriver                        0x000000010d3aa616 chromedriver + 435734\nE       3   chromedriver                        0x000000010d3f5b97 chromedriver + 744343\nE       4   chromedriver                        0x000000010d3f3450 chromedriver + 734288\nE       5   chromedriver                        0x000000010d3f0a84 chromedriver + 723588\nE       6   chromedriver                        0x000000010d3efbe4 chromedriver + 719844\nE       7   chromedriver                        0x000000010d3e21e1 chromedriver + 664033\nE       8   chromedriver                        0x000000010d412012 chromedriver + 860178\nE       9   chromedriver                        0x000000010d3e19c1 chromedriver + 661953\nE       10  chromedriver                        0x000000010d4121ce chromedriver + 860622\nE       11  chromedriver                        0x000000010d42ce76 chromedriver + 970358\nE       12  chromedriver                        0x000000010d411de3 chromedriver + 859619\nE       13  chromedriver                        0x000000010d3dfd7f chromedriver + 654719\nE       14  chromedriver                        0x000000010d3e10de chromedriver + 659678\nE       15  chromedriver                        0x000000010d7b12ad chromedriver + 4657837\nE       16  chromedriver                        0x000000010d7b6130 chromedriver + 4677936\nE       17  chromedriver                        0x000000010d7bcdef chromedriver + 4705775\nE       18  chromedriver                        0x000000010d7b705a chromedriver + 4681818\nE       19  chromedriver                        0x000000010d78992c chromedriver + 4495660\nE       20  chromedriver                        0x000000010d7d4838 chromedriver + 4802616\nE       21  chromedriver                        0x000000010d7d49b7 chromedriver + 4802999\nE       22  chromedriver                        0x000000010d7e599f chromedriver + 4872607\nE       23  libsystem_pthread.dylib             0x00007ff81cdb34e1 _pthread_start + 125\nE       24  libsystem_pthread.dylib             0x00007ff81cdaef6b thread_start + 15\n\nvenv/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:245: ElementClickInterceptedException"}, "start": 1690334540692, "stop": 1690334545043, "uuid": "b83ffbc1-10a9-478b-b309-546481b45de7", "historyId": "bd817b2fe8ceaa67ae8fc0315b5db0e5", "testCaseId": "bd817b2fe8ceaa67ae8fc0315b5db0e5", "fullName": "user_settings_tests.TestUserSettings#test_changed_currency_is_saved_after_logout", "labels": [{"name": "suite", "value": "user_settings_tests"}, {"name": "subSuite", "value": "TestUserSettings"}, {"name": "host", "value": "AirPauliukevich"}, {"name": "thread", "value": "8158-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "user_settings_tests"}]}